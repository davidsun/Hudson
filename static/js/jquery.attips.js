// Generated by CoffeeScript 1.3.3
/*
add tips when user input '@'
Usage: $('input').atTips()
*/

var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function() {
  var $, AtTips;
  AtTips = (function() {

    function AtTips(el, options) {
      var defaults;
      this.el = el;
      this.options = options != null ? options : {};
      this.move = __bind(this.move, this);

      this.prev = __bind(this.prev, this);

      this.next = __bind(this.next, this);

      this.render = __bind(this.render, this);

      this.highlighter = __bind(this.highlighter, this);

      this.sorter = __bind(this.sorter, this);

      this.matcher = __bind(this.matcher, this);

      this.process = __bind(this.process, this);

      this.updater = __bind(this.updater, this);

      this.select = __bind(this.select, this);

      this.lookup = __bind(this.lookup, this);

      this.hide = __bind(this.hide, this);

      this.show = __bind(this.show, this);

      this.onMouseenter = __bind(this.onMouseenter, this);

      this.onClick = __bind(this.onClick, this);

      this.onKeyup = __bind(this.onKeyup, this);

      this.onKeypress = __bind(this.onKeypress, this);

      this.onKeydown = __bind(this.onKeydown, this);

      this.onBlur = __bind(this.onBlur, this);

      this.source = __bind(this.source, this);

      defaults = {
        debounce: 150,
        api: '/users/contact/%s',
        items: 8,
        menu: '<ul class="typeahead dropdown-menu"></ul>',
        item: '<li><a href="#"></a></li>',
        minLength: 0,
        wrapper: '<div class="at-tips-wrapper"></div>'
      };
      this.options = $.extend({}, defaults, this.options);
      this.$el = $(el);
      this.matcher = this.options.matcher || this.matcher;
      this.sorter = this.options.sorter || this.sorter;
      this.highlighter = this.options.highlighter || this.highlighter;
      this.updater = this.options.updater || this.updater;
      this.$menu = $(this.options.menu).appendTo('body');
      this.$wrapper = $(this.options.wrapper).appendTo('body');
      this.shown = false;
      this.listen();
    }

    AtTips.prototype.source = function(query, callback) {
      var url,
        _this = this;
      url = this.options.api.replace('%s', encodeURIComponent(query));
      return $.getJSON(url, function(data) {
        return callback(data.contacts);
      });
    };

    AtTips.prototype.listen = function() {
      this.$el.on('blur', $.proxy(this.onBlur, this)).on('keypress', $.proxy(this.onKeypress, this)).on('keyup', $.proxy(this.onKeyup, this));
      if ($.browser.chrome || $.browser.webkit || $.browser.msie) {
        this.$el.on('keydown', $.proxy(this.onKeydown, this));
      }
      return this.$menu.on('click', $.proxy(this.onClick, this)).on('mouseenter', 'li', $.proxy(this.onMouseenter, this));
    };

    AtTips.prototype.getCursor = function() {
      var rangeData;
      rangeData = {
        start: 0,
        end: 0,
        text: ""
      };
      if (typeof this.el.selectionStart === "number") {
        rangeData.start = this.el.selectionStart;
        rangeData.end = this.el.selectionEnd;
        rangeData.text = this.el.value.substring(0, this.el.selectionStart);
      } else if (document.selection) {
        $.noop();
      }
      return rangeData;
    };

    AtTips.prototype.onBlur = function() {
      var _this = this;
      return setTimeout(function() {
        return _this.hide();
      }, 150);
    };

    AtTips.prototype.onKeydown = function(e) {
      this.suppressKeyPressRepeat = !~$.inArray(e.keyCode, [40, 38, 9, 13, 27]);
      return this.move(e);
    };

    AtTips.prototype.onKeypress = function(e) {
      if (this.suppressKeyPressRepeat) {
        return;
      }
      return this.move(e);
    };

    AtTips.prototype.onKeyup = function(e) {
      switch (e.keyCode) {
        case 40:
        case 38:
          break;
        case 9:
        case 13:
          if (!this.shown) {
            return;
          }
          this.select();
          break;
        case 27:
        case 32:
          if (!this.shown) {
            return;
          }
          this.hide();
          break;
        default:
          this.lookup();
      }
      e.stopPropagation();
      return e.preventDefault();
    };

    AtTips.prototype.onClick = function(e) {
      e.stopPropagation();
      e.preventDefault();
      return this.select();
    };

    AtTips.prototype.onMouseenter = function(e) {
      this.$menu.find('.active').removeClass('active');
      return $(e.currentTarget).addClass('active');
    };

    AtTips.prototype.show = function() {
      var pos;
      this.$wrapper.css({
        position: 'absolute',
        overflow: 'hidden',
        'z-index': -9999,
        left: this.$el.offset().left,
        top: this.$el.offset().top,
        height: this.$el.outerHeight(),
        width: this.$el.outerWidth(),
        'line-height': this.$el.css('line-height'),
        'padding': this.$el.css('padding'),
        'font-size': this.$el.css('font-size')
      });
      pos = $.extend({}, $('cite', this.$wrapper).offset(), {
        height: parseFloat(this.$wrapper.css('line-height').replace('px', ''))
      });
      this.$menu.css({
        top: pos.top + pos.height,
        left: pos.left
      });
      this.$menu.show();
      this.shown = true;
      return this;
    };

    AtTips.prototype.hide = function() {
      this.$menu.hide();
      this.$wrapper.html('');
      this.shown = false;
      return this;
    };

    AtTips.prototype.lookup = function() {
      var items, text, tmp;
      this.cursor = this.getCursor().start;
      text = this.$el.val();
      this.at = text.lastIndexOf('@', this.cursor);
      if (this.at === -1) {
        return this;
      }
      this.query = text.substring(this.at + 1, this.cursor);
      if (this.query.indexOf(' ') !== -1) {
        return this;
      }
      tmp = (text.substring(0, this.at) + text.substring(this.at).replace('@', '<cite>@</cite>')).replace('\n', '<br/>');
      this.$wrapper.html(tmp);
      if (this.options.minLength > 0 && (!this.query || this.query.length < this.options.minLength)) {
        if (this.shown) {
          return this.hide();
        } else {
          return this;
        }
      }
      items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source;
      if (items) {
        return this.process(items);
      } else {
        return this;
      }
    };

    AtTips.prototype.select = function() {
      var val;
      val = this.$menu.find('.active').attr('data-value');
      this.$el.val(this.updater(val)).change();
      return this.hide();
    };

    AtTips.prototype.updater = function(item) {
      var text;
      text = this.$el.val();
      return text.substring(0, this.at) + ("@" + item + " ") + text.substring(this.cursor);
    };

    AtTips.prototype.process = function(items) {
      var _this = this;
      items = $.grep(items, function(item) {
        return _this.matcher(item);
      });
      items = this.sorter(items);
      if (items.length === 0) {
        if (this.shown) {
          return this.hide();
        } else {
          return this;
        }
      }
      return this.render(items.slice(0, this.options.items + 1 || 9e9)).show();
    };

    AtTips.prototype.matcher = function(item) {
      return ~item.toLowerCase().indexOf(this.query.toLowerCase());
    };

    AtTips.prototype.sorter = function(items) {
      var beginswith, caseInsensitive, caseSensitive, item;
      beginswith = [];
      caseSensitive = [];
      caseInsensitive = [];
      while (item = items.shift()) {
        if (item.toLowerCase().indexOf(this.query.toLowerCase()) === 0) {
          beginswith.push(item);
        } else if (~item.indexOf(this.query)) {
          caseSensitive.push(item);
        } else {
          caseInsensitive.push(item);
        }
      }
      return beginswith.concat(caseSensitive, caseInsensitive);
    };

    AtTips.prototype.highlighter = function(item) {
      var query,
        _this = this;
      query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
      return item.replace(new RegExp('(' + query + ')', 'ig'), function($1, match) {
        return "<strong>" + match + "</strong>";
      });
    };

    AtTips.prototype.render = function(items) {
      var _this = this;
      items = $(items).map(function(i, item) {
        i = $(_this.options.item).attr('data-value', item);
        i.find('a').html(_this.highlighter(item));
        return i[0];
      });
      items.first().addClass('active');
      this.$menu.html(items);
      return this;
    };

    AtTips.prototype.next = function() {
      var active, next;
      active = this.$menu.find('.active').removeClass('active');
      next = active.next();
      if (!next.length) {
        next = $(this.$menu.find('li')[0]);
      }
      return next.addClass('active');
    };

    AtTips.prototype.prev = function() {
      var active, prev;
      active = this.$menu.find('.active').removeClass('active');
      prev = active.prev();
      if (!prev.length) {
        prev = this.$menu.find('li').last();
      }
      return prev.addClass('active');
    };

    AtTips.prototype.move = function(e) {
      if (!this.shown) {
        return;
      }
      switch (e.keyCode) {
        case 9:
        case 13:
        case 27:
          e.preventDefault();
          break;
        case 38:
          e.preventDefault();
          this.prev();
          break;
        case 40:
          e.preventDefault();
          this.next();
      }
      return e.stopPropagation();
    };

    return AtTips;

  })();
  $ = window.jQuery;
  $.fn.atTips = function(option) {
    return this.each(function() {
      var $this, data, options;
      $this = $(this);
      data = $this.data('atTips');
      options = typeof option === 'object' && option;
      if (!data) {
        $this.data('atTips', (data = new AtTips(this, options)));
      }
      if (typeof option === 'string') {
        return data[option]();
      }
    });
  };
  return $.fn.atTips.Constructor = AtTips;
})();
